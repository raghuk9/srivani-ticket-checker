name: Srivani Token Status Checker

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  run_tagui_script:
    runs-on: ubuntu-latest # <--- THIS MUST BE ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up TagUI
      run: |
        # Update and install necessary dependencies
        sudo apt-get update
        sudo apt-get install -y openjdk-11-jre unzip chromium-browser xvfb curl libssl-dev

        # --- Aggressive OpenSSL 3.x compatibility for libproviders.so ---
        echo "Attempting aggressive OpenSSL provider configuration fix..."

        # Try to find a working openssl.cnf, prefer a 3.x one if it exists
        OPENSSL_CNF_PATH="/etc/ssl/openssl.cnf" # Default location

        # Check if providers are causing issues and try to work around them
        # Create a temporary openssl.cnf that uses the legacy provider by default
        echo "Creating temporary openssl.cnf for legacy provider support..."
        sudo bash -c 'cat <<EOF > /tmp/openssl_legacy.cnf
        [openssl_conf]
        ssl_conf = ssl_module_config

        [ssl_module_config]
        ssl_default_sect = ssl_sect

        [ssl_sect]
        system_default = ssl_default_sect

        [ssl_default_sect]
        # This line tells OpenSSL 3.x to use the legacy provider
        activate = 1
        providers = provider_sect

        [provider_sect]
        # Enable the base provider (essential) and the legacy provider
        default = default_sect
        legacy = legacy_sect

        [default_sect]
        activate = 1

        [legacy_sect]
        activate = 1
        EOF'

        # Symlink the system's openssl.cnf to our custom one
        # This is a bit risky but necessary if the default is causing issues
        sudo mv /etc/ssl/openssl.cnf /etc/ssl/openssl.cnf.bak || true # Backup original
        sudo ln -sf /tmp/openssl_legacy.cnf /etc/ssl/openssl.cnf
        echo "Symlinked /etc/ssl/openssl.cnf to /tmp/openssl_legacy.cnf"

        # Explicitly set environment variables (still useful even with modified cnf)
        export NODE_OPTIONS="--openssl-legacy-provider"
        export OPENSSL_CONF=/etc/ssl/openssl.cnf
        export LD_LIBRARY_PATH="/usr/lib/x86_64-linux-gnu/:$LD_LIBRARY_PATH"
        echo "OpenSSL environment variables set."
        # --- End Aggressive OpenSSL compatibility ---

        # Download TagUI
        wget --no-check-certificate https://github.com/aisingapore/TagUI/releases/download/v6.110.0/TagUI_Linux.zip -O /tmp/TagUI_Linux.zip

        # Unzip TagUI to a temporary directory
        mkdir -p /tmp/tagui_extracted
        unzip /tmp/TagUI_Linux.zip -d /tmp/tagui_extracted

        # Find the actual top-level folder name
        TAGUI_FOLDER=$(ls -1 /tmp/tagui_extracted | head -n 1)
        echo "Identified TagUI top-level folder: $TAGUI_FOLDER"

        # Define the final, consistent installation path
        TAGUI_INSTALL_BASE="/usr/local/share/tagui"
        sudo mkdir -p "$TAGUI_INSTALL_BASE"
        sudo chmod 755 "$TAGUI_INSTALL_BASE"

        # Move the contents of the extracted folder into the final destination
        sudo mv /tmp/tagui_extracted/"$TAGUI_FOLDER"/* "$TAGUI_INSTALL_BASE"/

        # The 'tagui' executable is inside the 'src' directory.
        TAGUI_EXECUTABLE_FINAL_PATH="$TAGUI_INSTALL_BASE/src/tagui"

        # Verify TagUI directory contents
        echo "Listing contents of $TAGUI_INSTALL_BASE/src:"
        ls -la "$TAGUI_INSTALL_BASE"/src/

        # Ensure the TagUI executable has execute permissions
        echo "Setting execute permissions for: $TAGUI_EXECUTABLE_FINAL_PATH"
        sudo chmod +x "$TAGUI_EXECUTABLE_FINAL_PATH"

        # Create the symbolic link
        sudo ln -sf "$TAGUI_EXECUTABLE_FINAL_PATH" /usr/local/bin/tagui

        # Verify the symbolic link
        echo "Verifying symbolic link:"
        ls -la /usr/local/bin/tagui

        # Verify TagUI is now found in PATH
        echo "Checking if tagui command is found:"
        which tagui

        # Initialize TagUI
        tagui || true

    - name: Run TagUI script
      run: |
        # Change to the repository root directory directly
        cd "$GITHUB_WORKSPACE"

        # Run your TagUI script in headless mode
        # Since srivani.tag is in the root, you can call it directly
        tagui srivani.tag -headless
      
      env:
        DISPLAY: ':99.0'

    - name: Upload CSV artifact
      uses: actions/upload-artifact@v4
      with:
        name: srivani-data
        # The CSV will be in the repository root because the script runs from there
        path: srivani.csv

#    - name: Commit and push CSV (optional, if you want to track it in repo)
#      if: success()
#      run: |
#        git config user.name "GitHub Actions"
#        git config user.email "actions@github.com"
#        # The CSV will be in the repository root
#        git add srivani.csv
#        git commit -m "Update Srivani data" || echo "No changes to commit"
#        git push
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
